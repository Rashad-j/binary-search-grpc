// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rashad-j/go-grpc-search-svc/rpc/search (interfaces: SearchServiceServer)

// Package mock_search is a generated GoMock package.
package mock_search

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	search "github.com/rashad-j/go-grpc-search-svc/rpc/search"
)

// MockSearchServiceServer is a mock of SearchServiceServer interface.
type MockSearchServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceServerMockRecorder
}

// MockSearchServiceServerMockRecorder is the mock recorder for MockSearchServiceServer.
type MockSearchServiceServerMockRecorder struct {
	mock *MockSearchServiceServer
}

// NewMockSearchServiceServer creates a new mock instance.
func NewMockSearchServiceServer(ctrl *gomock.Controller) *MockSearchServiceServer {
	mock := &MockSearchServiceServer{ctrl: ctrl}
	mock.recorder = &MockSearchServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchServiceServer) EXPECT() *MockSearchServiceServerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSearchServiceServer) Delete(arg0 context.Context, arg1 *search.DeleteRequest) (*search.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*search.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSearchServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSearchServiceServer)(nil).Delete), arg0, arg1)
}

// Insert mocks base method.
func (m *MockSearchServiceServer) Insert(arg0 context.Context, arg1 *search.InsertRequest) (*search.InsertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(*search.InsertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockSearchServiceServerMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSearchServiceServer)(nil).Insert), arg0, arg1)
}

// Search mocks base method.
func (m *MockSearchServiceServer) Search(arg0 context.Context, arg1 *search.SearchRequest) (*search.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*search.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchServiceServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchServiceServer)(nil).Search), arg0, arg1)
}

// mustEmbedUnimplementedSearchServiceServer mocks base method.
func (m *MockSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSearchServiceServer")
}

// mustEmbedUnimplementedSearchServiceServer indicates an expected call of mustEmbedUnimplementedSearchServiceServer.
func (mr *MockSearchServiceServerMockRecorder) mustEmbedUnimplementedSearchServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSearchServiceServer", reflect.TypeOf((*MockSearchServiceServer)(nil).mustEmbedUnimplementedSearchServiceServer))
}
